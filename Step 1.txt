import pandas as pd
import openpyxl
import numpy as np
import pathlib
from pathlib import Path
import xlrd
import sys
import os

#Проверяем наличие прайсов. Если их нет или ошибка в наименовании или расширении, то выводим ошибку.
directory = Path(pathlib.Path.cwd(), "Prices")
files_to_check = ['Arispro.xls', 'Artimusic.xls', 'Attrade.xls', 'Gewa.csv', 'Grand.xls', 'Invask.xls', 'Lutner.csv', 'Neva.xls', 'Okno.xls', 'Pop.xls', 'Proaudio.xlsx', 'Roland.xls', 'Slami.xls', 'United.xls']  # Укажите имена файлов, которые вы хотите проверить

missing_files = []

for file_name in files_to_check:
    file_path = os.path.join(directory, file_name)
    if not os.path.exists(file_path):
        missing_files.append(file_name)

if missing_files:
    print(f"Проблема с {', '.join(missing_files)}")
    print(input())
    sys.exit([0])

class Vendor:
    def __init__(self, name, shortname, start, art, model, nal, opt, rrc, ext='xls', sheet_name=0):
        self.name = name
        self.shortname = shortname
        self.start = start
        self.art = art
        self.model = model
        self.nal = nal
        self.opt = opt
        self.rrc = rrc
        self.ext = ext
        self.sheet_name = sheet_name

    def set_name(self, column, from_opt=0, margin=0):
        self.column = column
        self.from_opt = from_opt
        self.margin = margin
        
    def delit_CSV():
        """Удаляем старые файлы, что бы заполнить их заново"""
        if os.path.exists(Path(pathlib.Path.cwd(), "CSV", "!BD.csv")):
            os.remove(Path(pathlib.Path.cwd(), "CSV", "!BD.csv"))
        if os.path.exists(Path(pathlib.Path.cwd(), "CSV", "!Name.csv")):             
            os.remove(Path(pathlib.Path.cwd(), "CSV", "!Name.csv"))
            
    def open_csv_file(self):
        """открывает CSV-файл"""
        df = pd.read_csv(Path(pathlib.Path.cwd(), "Prices", f"{self.name}.{self.ext}"), encoding='cp1252', dtype=object, sep=';', header=None).loc[self.start:, :]
        self.re_name(df)

    def open_xls_file(self):
        """открывает XLS-файл"""
        df = pd.read_excel(Path(pathlib.Path.cwd(), "Prices", f"{self.name}.{self.ext}"), sheet_name=self.sheet_name, header=None).loc[self.start:, :]
        df = df.fillna(0)
        # если название прайсов совпадает с этими тремя, то переходим в функцию, которая создает столбец с Оптовой ценой
        if self.name in ('Arispro', 'Proaudio', 'Roland'):
            self.create_column(df)
        else:
            self.re_name(df)

    def create_column(self, df):
        """Создаёт столбец ОПТ для 'Arispro', 'Proaudio', 'Roland'"""
        df[self.column] = (df[self.from_opt] * self.margin).astype(int)
        self.re_name(df)

    def re_name(self, df):
        """Переименовывает столбцы в нужный вид"""
        df.rename(columns={self.art: 'Артикул', self.model: 'Модель', self.nal: 'Наличие', self.opt: 'ОПТ', self.rrc: 'РРЦ'}, inplace=True)
        df['Поставщик'] = self.name
        df = df[['Поставщик', 'Артикул', 'Модель', 'Наличие', 'ОПТ', 'РРЦ']]
        df = df.drop_duplicates('Артикул') #убирает дубликаты артикулов, т.к. такое встречается в прайсах.
        self.change_words(df)
      
    def change_words(self, df):
        """Убираем строки в ячейках которых, всякий мусор"""
        # Определяем списки значений, которые требуется исключить
        exclude_values = ['Уточняйте ', 'Уточняйте', 'не для продажи в РФ', 'Çâîíèòå', '0', 'Звоните', 'витрина']
        # Фильтруем DataFrame, используя значение включающего оператора "и" (&)
        df = df.loc[~df['РРЦ'].isin(exclude_values) & ~df['ОПТ'].isin(exclude_values) & (df['РРЦ'] != 0) & (df['ОПТ'] != 0)]
        df = df.loc[(df['Наличие'] != 'витрина') & (df['ОПТ'] != 'витрина')]
        # Удаляем дубликаты
        df = df.drop_duplicates('Артикул')
        self.change_type(df)

    def change_type(self, df):
        """Выравниваем типы данных во всех столбцах"""
        df.fillna(0, inplace=True)
        df[['ОПТ', 'РРЦ']] = df[['ОПТ', 'РРЦ']].astype(float).astype(int)
        # убираем в двух столбцах пробелы с двух сторон
        df['Артикул'] = df['Артикул'].apply(lambda x: str(x).strip())
        df['Модель'] = df['Модель'].apply(lambda x: str(x).strip())
        self.tocsv(df)
        self.create_BD_file(df)
        
    def tocsv(self, df):
        """Сохраняет в CSV Файл всех поставщиков после того, как мы прибрались в столбцах"""
        df.to_csv(Path(pathlib.Path.cwd(), "CSV", f"{self.name}.csv"), sep=';', mode='w', index=False)

    def create_BD_file(self, df):
        """Создаёт файл !BD"""
        df['Поставщик'] = self.shortname
        df.to_csv(Path(pathlib.Path.cwd(), "CSV", "!BD.csv"), sep=';', mode='a', index=False)

    def create_Name_file():
        """Берёт из главного файла название и все артикулы и сохраняет в файл !Name"""
        df1 = pd.read_excel(Path(pathlib.Path.cwd(), "!Товары.xlsm"), sheet_name='General', header=None).iloc[2:, 10:31]
        df1 = df1[[10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]
        df1.to_csv(Path(pathlib.Path.cwd(), "CSV", "!Name.csv"), index=False)
        
    def create_general_file():
        """Из главного файла берет большинство столбцов и сохраняет в файл General, для второй части кода"""
        df = pd.read_excel(r"!Товары.xlsm", usecols=[0, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], header=None, skiprows=1) #Считывает содержимое файла Excel "!Товары.xlsm" в объект pandas.DataFrame, выбирая только определенные столбцы и пропуская первую строку с заголовками столбцов в качестве шапки
        df = df.applymap(str) #Преобразует все значения в DataFrame в строковый формат
        df.iloc[:, 16:29] = df.iloc[:, 16:29].apply(lambda col: col.str.strip()) #Удаляет пробелы из значений в выбранных столбцах DataFrame, используя метод apply() вместе с lambda-функцией, которая вызывает метод str.strip() для каждого элемента выбранного столбца
        df.rename(columns={0: 'Номер в Avito - Id', 10: 'Название объявления - Title', 14: 'Склад', 15: 'Цена склада', 16: 'Attrade', 17: 'Slami', 18: 'Invask', 19: 'Proaudio', 20: 'Arispro',
                               21: 'Artimusic', 22: 'Pop', 23: 'Roland', 24: 'Okno', 25: 'Grand', 26: 'Lutner', 27: 'Neva', 28: 'Gewa', 29: 'United', 30: 'Итоговая цена'}, inplace=True)
        #Переименовывает выбранные столбцы DataFrame по определенным меткам
        df['Итоговая цена'] = 0 # Создает новый столбец в DataFrame с именем Итоговая цена и заполняет его нулями
        df.to_csv(r"CSV\General.csv", sep=';', mode='w', index=False) #Сохраняет объект DataFrame в формате CSV в файл CSV\General.csv с разделителем ';' и без индекса строк

Artimusic = Vendor('Artimusic', 'ART', 4, 1, 0, 5, 2, 4)
Attrade = Vendor('Attrade', 'ATT', 21, 1, 4, 7, 18, 11)
Gewa = Vendor('Gewa', 'GEW', 16, 0, 2, 3, 5, 6, 'csv')
Grand = Vendor('Grand', 'GDM', 10, 1, 2, 3, 7, 9)
Invask = Vendor('Invask', 'INV', 14, 0, 2, 8, 7, 6)
Lutner = Vendor('Lutner', 'LTN', 1, 1, 2, 3, 4, 6, 'csv')
Neva = Vendor('Neva', 'NVS', 9, 0, 4, 16, 15, 14)
Okno = Vendor('Okno', 'OKN', 8, 0, 1, 5, 3, 4, 'xls', 'Основной прайс-лист')
Pop = Vendor('Pop', 'POP', 8, 13, 0, 5, 9, 10)
Slami = Vendor('Slami', 'SLM', 5, 2, 4, 8, 7, 5)
United = Vendor('United', 'UNT', 9, 1, 2, 5, 11, 9)
Arispro = Vendor('Arispro', 'ARP', 4, 2, 3, 5, 7, 4)
Arispro.set_name(column=7, from_opt=4, margin=0.7)
Proaudio = Vendor('Proaudio', 'PRO', 7, 0, 2, 4, 8, 5, 'xlsx', 'Прайс-Лист')
Proaudio.set_name(column=8, from_opt=5, margin=0.75)
Roland = Vendor('Roland', 'ROL', 14, 2, 1, 9, 7, 5)
Roland.set_name(column=9)

Vendor.delit_CSV()
Artimusic.open_xls_file()
Attrade.open_xls_file()
Gewa.open_csv_file()
Grand.open_xls_file()
Invask.open_xls_file()
Lutner.open_csv_file()
Neva.open_xls_file()
Okno.open_xls_file()
Pop.open_xls_file()
Slami.open_xls_file()
United.open_xls_file()
Arispro.open_xls_file()
Proaudio.open_xls_file()
Roland.open_xls_file()
Vendor.create_Name_file()
Vendor.create_general_file()

class Vendors:
    def __init__(self, name, short_name):
        self.name = name
        self.short_name = short_name

    def create_data_frame():
        """Создаём фрейм из файла General"""
        df = pd.read_csv(Path(pathlib.Path.cwd(), "CSV", "General.csv"), sep=';')
        return df

    def create_vendors(self, df):
        """Создаём переменную поставщика и оставляем только нужные три столбца, а для uni 4 столбца"""
        if self.short_name == 'uni':
            self.short_name = pd.read_csv(Path(pathlib.Path.cwd(), "CSV", f"{self.name}.csv"), sep=';')[['Артикул', 'Наличие', 'ОПТ', 'РРЦ']].astype(str)
        else:
            self.short_name = pd.read_csv(Path(pathlib.Path.cwd(), "CSV", f"{self.name}.csv"), sep=';')[['Артикул', 'Наличие', 'ОПТ']].astype(str)
        # Берем товары, которые в наличии и пихаем в новый столбец
        df = pd.merge(df, self.short_name, left_on=self.name, right_on='Артикул', how='left')
        # Проверяем, если в столбце стоит значение 0 или оно пустое, то значит товара нет и в столбце 'ОПТ' оставляем пустое значение       
        df.loc[(df['Наличие'] == ' ')|(df['Наличие'] == '0')|(df['Наличие'].isnull() == True)|(df['Наличие'] == 'нет')|(df['Наличие'] == 'витрина')|(df['Наличие'] == 'резерв'), 'ОПТ'] = pd.NA
        # Удаляем ненужные столбцы
        df = df.drop(columns=['Артикул', 'Наличие'])
        # Переименовываем столбец ОПТ
        df.rename(columns={'ОПТ': f'Цена {self.name}'}, inplace=True)
        return df
    
    def generate_price(df):
        """Процентовка, наценка, округление"""
        df["Итоговая цена"] = df.loc[:,'Цена Attrade':'Цена United'].apply(pd.to_numeric, errors='coerce').astype('Int64').min(axis=1, numeric_only=True).fillna(0)
        edges = [0, 10000, 20000, 50000, 100000, np.inf] # интервалы от и до. Cправа бесконечность                                                 
        pcts = iter([22, 15, 15, 15, 11])                # проценты. количество должно совпадать с количеством интервалов
        df['Итоговая цена'] = df.groupby(pd.cut(df["Итоговая цена"], bins = edges, right=False))["Итоговая цена"].apply(lambda x: x+x*next(pcts)/100) # преобразование цены по диапазонам
        df['Итоговая цена'] = df["Итоговая цена"].apply(lambda x: np.round(x * 2, -3) // 2) # округление
        return df
      
    def forclients(df):
        """Генерируем файл forclients"""
        tofile = df.copy()
        tofile.loc[tofile['Склад'].isin([1, '1']) & (~tofile['Цена склада'].isna()), 'Итоговая цена'] = tofile['Цена склада']
        tofile = tofile.loc[
            tofile['Итоговая цена'].fillna(0).astype(int) != 0,
            ['Название объявления - Title', 'Склад', 'Цена склада', 'Итоговая цена', 'РРЦ']
        ]
        tofile['РРЦ'] = tofile['РРЦ'].fillna(0).astype(int)
        tofile.loc[tofile['Склад'].isin([3, '3']) & (tofile['Итоговая цена'] != 0), 'Итоговая цена'] = tofile['РРЦ']
        tofile['Итоговая цена'] = tofile['Итоговая цена'].astype(int)
        tofile = tofile[['Название объявления - Title', 'Итоговая цена']]
        with pathlib.Path("CSV", "!Forclients.csv").open("w", newline="", encoding="utf-8") as f:
            tofile.to_csv(f, sep=";", index=False)    
   
    def one_zero(df):
        """Округляем столбец РРЦ и Вносим изменения в столбец Итоговая цена"""
        df['РРЦ'] = df['РРЦ'].replace([np.inf, -np.inf], np.nan).fillna(0).astype(float).apply(lambda x: int(x // 100 * 100))
        df['РРЦ'] = df['РРЦ'].astype(int).astype(str)
        # Просле процентовки необходимо поставить заменить цены на 1, там где нельзя ставить цены и проставить 1 и его цену, если товар есть на нашем складе.
        df.loc[df['Склад'].isin([1, '1']) & (df['Цена склада'].isna()), 'Итоговая цена'] = 1
        df.loc[df['Склад'].isin([1, '1']) & (~df['Цена склада'].isna()), 'Итоговая цена'] = df['Цена склада']
        df.loc[df['Склад'].isin([2, '2']) & (df['Итоговая цена'] != 0), 'Итоговая цена'] = 1
        df.loc[df['Склад'].isin([3, '3']) & (df['Итоговая цена'] != 0), 'Итоговая цена'] = df['РРЦ']
        # Удаление последнего столбца РРЦ, из которго мы берем РРЦ цену, Если в поле СКЛАД стоит значение 3.
        df.drop(columns=['РРЦ'], inplace=True)
        return df
    
#     def style_specific_cell(x):
#         """Красим в желтый ячейку нужного столбца"""
#         color = 'background-color: yellow'
#         df1 = pd.DataFrame('', index=x.index, columns=x.columns)
#         df1.iloc[0, 18] = color
#         return df1

    def printtofile(df):
        """Сохраняем результат в Сводная таблица"""
        writer = pd.ExcelWriter(Path(pathlib.Path.cwd(), "CSV", "Сводная таблица.xlsx"), engine='xlsxwriter')
        df.to_excel(writer, sheet_name='Sheet1', index=False)
        writer.save()

Attrade = Vendors('Attrade', 'att')
Slami = Vendors('Slami', 'slm')
Invask = Vendors('Invask', 'inv')
Proaudio = Vendors('Proaudio', 'pro')
Arispro = Vendors('Arispro', 'ari')
Artimusic = Vendors('Artimusic', 'art')
Pop = Vendors('Pop', 'pop')
Roland = Vendors('Roland', 'rol')
Okno = Vendors('Okno', 'okn')
Grand = Vendors('Grand', 'grn')
Lutner = Vendors('Lutner', 'lut')
Neva = Vendors('Neva', 'nev')
Gewa = Vendors('Gewa', 'gew')
United = Vendors('United', 'uni')

df = Vendors.create_data_frame()
df = Attrade.create_vendors(df)
df = Slami.create_vendors(df)
df = Invask.create_vendors(df)
df = Proaudio.create_vendors(df)
df = Arispro.create_vendors(df)
df = Artimusic.create_vendors(df)
df = Pop.create_vendors(df)
df = Roland.create_vendors(df)
df = Okno.create_vendors(df)
df = Grand.create_vendors(df)
df = Lutner.create_vendors(df)
df = Neva.create_vendors(df)
df = Gewa.create_vendors(df)
df = United.create_vendors(df)


Vendors.generate_price(df)
Vendors.forclients(df)
Vendors.one_zero(df)
# df = df.style.apply(Vendors.style_specific_cell, axis=None)
Vendors.printtofile(df)



